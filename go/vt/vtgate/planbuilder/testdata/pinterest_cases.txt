# We don't disallow selecting unknown columns from an authoritative
# vschema at Pinterest. We only have the authoritative column list
# to help with ad-hoc "select *" queries. It might be nice to
# contribute some version of the -allow_select_unauthoritative_col flag back
# upstream.
"select col1, @@hostname from authoritative"
{
  "Original": "select col1, @@hostname from authoritative",
  "Instructions": {
    "Opcode": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select col1, @@hostname from authoritative",
    "FieldQuery": "select col1, @@hostname from authoritative where 1 != 1",
    "Table": "authoritative"
  }
}

# Force scatter directive. In select_cases.txt this test results in a SelectEqualUnique plan without the FORCE_SCATTER
"select /*vt+ FORCE_SCATTER=1 */ * from user where name ='abc' AND (id = 4) limit 5"
{
  "Original": "select /*vt+ FORCE_SCATTER=1 */ * from user where name ='abc' AND (id = 4) limit 5",
  "Instructions": {
    "Opcode":"Limit",
    "Count":5,
    "Offset":null,
    "Input":{
      "Opcode": "SelectScatter",
      "Keyspace": {
        "Name": "user",
        "Sharded": true
      },
    "Query": "select /*vt+ FORCE_SCATTER=1 */ * from user where name = 'abc' and (id = 4) limit :__upper_limit",
    "FieldQuery": "select * from user where 1 != 1",
    "Table": "user"
    }
  }
}


# Simple scatter_cache
"select * from campaigns where id = 7"
{
  "Original": "select * from campaigns where id = 7",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from campaigns where id = 7",
    "FieldQuery": "select * from campaigns where 1 != 1",
    "Vindex": "campaign_idx",
    "Values": [
      7
    ],
    "Table": "campaigns"
  }
}


# Prefer hash vindex over scatter cache
"select * from campaigns where advertiser_id = 6 and id = 7"
{
  "Original": "select * from campaigns where advertiser_id = 6 and id = 7",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from campaigns where advertiser_id = 6 and id = 7",
    "FieldQuery": "select * from campaigns where 1 != 1",
    "Vindex": "advertiser_idx",
    "Values": [6],
    "Table": "campaigns"
  }
}

# Insert with value that's in a scatter-cache vindex column
"insert into campaigns(id, advertiser_id) values(1, 2)"
{
  "Original": "insert into campaigns(id, advertiser_id) values(1, 2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into campaigns(id, advertiser_id) values (:_id0, :_advertiser_id0)",
    "Values": [
      [[2]],
      [[1]]
    ],
    "Table": "campaigns",
    "Prefix": "insert into campaigns(id, advertiser_id) values ",
    "Mid": [
      "(:_id0, :_advertiser_id0)"
    ]
  }
}

"insert into adgroup_specs(advertiser_id) values(2)"
{
  "Original": "insert into adgroup_specs(advertiser_id) values(2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into adgroup_specs(advertiser_id, id) values (:_advertiser_id0, :_id0)",
    "Values": [
      [[2]],
      [[":__seq0"]]
    ],
    "Table": "adgroup_specs",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [null]
    },
    "Prefix": "insert into adgroup_specs(advertiser_id, id) values ",
    "Mid": [
      "(:_advertiser_id0, :_id0)"
    ]
  }
}

# Insert omitting billing profile ID, which has a scatter-cache vindex column
"insert into advertisers(id) values(1)"
{
  "Original": "insert into advertisers(id) values(1)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "insert into advertisers(id, billing_profile_id) values (:_id0, :_billing_profile_id0)",
    "Values": [
      [[1]],
      [[null]]
    ],
    "Table": "advertisers",
    "Prefix": "insert into advertisers(id, billing_profile_id) values ",
    "Mid": [
      "(:_id0, :_billing_profile_id0)"
    ]
  }
}

# Insert Ad_group with NULL value in unowned PinLookupVindex
# The Unowned PinLookupVindex will have a mapping Keyspace ID in "Values", but it won't be used as Unwoned Vindex is
# always skipped.
"insert into adgroups(advertiser_id, adgroup_spec_id) values(1, 2)"
{
  "Original": "insert into adgroups(advertiser_id, adgroup_spec_id) values(1, 2)",
  "Instructions": {
    "Opcode": "InsertSharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query":"insert into adgroups(advertiser_id, adgroup_spec_id, id) values (:_advertiser_id0, :_adgroup_spec_id0, :_id0)",
    "Values": [
      [[1]],
      [[2]],
      [[":__seq0"]],
      [[":__seq0"]]
    ],
    "Table": "adgroups",
    "Generate": {
      "Keyspace": {
        "Name": "main",
        "Sharded": false
      },
      "Query": "select next :n values from seq",
      "Values": [null]
    },
    "Prefix": "insert into adgroups(advertiser_id, adgroup_spec_id, id) values ",
    "Mid": [
      "(:_advertiser_id0, :_adgroup_spec_id0, :_id0)"
    ]
  }
}

# Update to populate billing profile ID, which has a scatter-cache vindex column
"update advertisers set billing_profile_id = 5 where id = 6"
{
  "Original": "update advertisers set billing_profile_id = 5 where id = 6",
  "Instructions": {
    "Opcode": "UpdateEqual",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "update advertisers set billing_profile_id = 5 where id = 6",
    "Vindex": "advertiser_idx",
    "Values": [
      6
    ],
    "Table": "advertisers"
  }
}

# Test if choose Vindex based on their cost, not the order of them in ColumnVindexes
"select * from adgroups where id = 7"
{
  "Original": "select * from adgroups where id = 7",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from adgroups where id = 7",
    "FieldQuery": "select * from adgroups where 1 != 1",
    "Vindex": "adgroup_idx",
    "Values": [
      7
    ],
    "Table": "adgroups"
  }
}

# Simple select in table with reversed order ColumnVindexes, to make sure it still select the lowest cost one
"select * from adgroups2 where id = 7"
{
  "Original": "select * from adgroups2 where id = 7",
  "Instructions": {
    "Opcode": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "Query": "select * from adgroups2 where id = 7",
    "FieldQuery": "select * from adgroups2 where 1 != 1",
    "Vindex": "adgroup_idx",
    "Values": [
      7
    ],
    "Table": "adgroups2"
  }
}
