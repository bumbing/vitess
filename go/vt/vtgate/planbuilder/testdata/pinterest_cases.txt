# We don't disallow selecting unknown columns from an authoritative
# vschema at Pinterest. We only have the authoritative column list
# to help with ad-hoc "select *" queries. It might be nice to
# contribute some version of the -allow_select_unauthoritative_col flag back
# upstream.
"select col1, @@hostname from authoritative"
{
  "QueryType": "SELECT",
  "Original": "select col1, @@hostname from authoritative",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1, @@hostname from authoritative where 1 != 1",
    "Query": "select col1, @@hostname from authoritative",
    "Table": "authoritative"
  }
}

# Force scatter directive. In select_cases.txt this test results in a SelectEqualUnique plan without the FORCE_SCATTER
"select /*vt+ FORCE_SCATTER=1 */ * from user where name ='abc' AND (id = 4) limit 5"
{
  "QueryType": "SELECT",
  "Original": "select /*vt+ FORCE_SCATTER=1 */ * from user where name ='abc' AND (id = 4) limit 5",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select * from user where 1 != 1",
        "Query": "select /*vt+ FORCE_SCATTER=1 */ * from user where name = 'abc' and id = 4 limit :__upper_limit",
        "Table": "user"
      }
    ]
  }
}


# Simple scatter_cache
"select * from campaigns where id = 7"
{
  "QueryType": "SELECT",
  "Original": "select * from campaigns where id = 7",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from campaigns where 1 != 1",
    "Query": "select * from campaigns where id = 7",
    "Table": "campaigns",
    "Values": [
      7
    ],
    "Vindex": "campaign_idx"
  }
}


# Prefer hash vindex over scatter cache
"select * from campaigns where advertiser_id = 6 and id = 7"
{
  "QueryType": "SELECT",
  "Original": "select * from campaigns where advertiser_id = 6 and id = 7",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from campaigns where 1 != 1",
    "Query": "select * from campaigns where advertiser_id = 6 and id = 7",
    "Table": "campaigns",
    "Values": [
      6
    ],
    "Vindex": "advertiser_idx"
  }
}

# Insert with value that's in a scatter-cache vindex column
"insert into campaigns(id, advertiser_id) values(1, 2)"
{
  "QueryType": "INSERT",
  "Original": "insert into campaigns(id, advertiser_id) values(1, 2)",
  "Instructions": {
    "OperatorType": "Insert",
    "Variant": "Sharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "TargetTabletType": "MASTER",
    "MultiShardAutocommit": false,
    "Query": "insert into campaigns(id, advertiser_id) values (:_id0, :_advertiser_id0)",
    "TableName": "campaigns"
  }
}

"insert into adgroup_specs(advertiser_id) values(2)"
{
  "QueryType": "INSERT",
  "Original": "insert into adgroup_specs(advertiser_id) values(2)",
  "Instructions": {
    "OperatorType": "Insert",
    "Variant": "Sharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "TargetTabletType": "MASTER",
    "MultiShardAutocommit": false,
    "Query": "insert into adgroup_specs(advertiser_id, id) values (:_advertiser_id0, :_id0)",
    "TableName": "adgroup_specs"
  }
}

# Insert omitting billing profile ID, which has a scatter-cache vindex column
"insert into advertisers(id) values(1)"
{
  "QueryType": "INSERT",
  "Original": "insert into advertisers(id) values(1)",
  "Instructions": {
    "OperatorType": "Insert",
    "Variant": "Sharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "TargetTabletType": "MASTER",
    "MultiShardAutocommit": false,
    "Query": "insert into advertisers(id, billing_profile_id) values (:_id0, :_billing_profile_id0)",
    "TableName": "advertisers"
  }
}

# Insert Ad_group with NULL value in unowned PinLookupVindex
# The Unowned PinLookupVindex will have a mapping Keyspace ID in "Values", but it won't be used as Unwoned Vindex is
# always skipped.
"insert into adgroups(advertiser_id, adgroup_spec_id) values(1, 2)"
{
  "QueryType": "INSERT",
  "Original": "insert into adgroups(advertiser_id, adgroup_spec_id) values(1, 2)",
  "Instructions": {
    "OperatorType": "Insert",
    "Variant": "Sharded",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "TargetTabletType": "MASTER",
    "MultiShardAutocommit": false,
    "Query": "insert into adgroups(advertiser_id, adgroup_spec_id, id) values (:_advertiser_id0, :_adgroup_spec_id0, :_id0)",
    "TableName": "adgroups"
  }
}

# Update to populate billing profile ID, which has a scatter-cache vindex column
"update advertisers set billing_profile_id = 5 where id = 6"
{
  "QueryType": "UPDATE",
  "Original": "update advertisers set billing_profile_id = 5 where id = 6",
  "Instructions": {
    "OperatorType": "Update",
    "Variant": "Equal",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "TargetTabletType": "MASTER",
    "MultiShardAutocommit": false,
    "Query": "update advertisers set billing_profile_id = 5 where id = 6",
    "Table": "advertisers",
    "Values": [
      6
    ],
    "Vindex": "advertiser_idx"
  }
}

# Test if choose Vindex based on their cost, not the order of them in ColumnVindexes
"select * from adgroups where id = 7"
{
  "QueryType": "SELECT",
  "Original": "select * from adgroups where id = 7",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from adgroups where 1 != 1",
    "Query": "select * from adgroups where id = 7",
    "Table": "adgroups",
    "Values": [
      7
    ],
    "Vindex": "adgroup_idx"
  }
}

# Simple select in table with reversed order ColumnVindexes, to make sure it still select the lowest cost one
"select * from adgroups2 where id = 7"
{
  "QueryType": "SELECT",
  "Original": "select * from adgroups2 where id = 7",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select * from adgroups2 where 1 != 1",
    "Query": "select * from adgroups2 where id = 7",
    "Table": "adgroups2",
    "Values": [
      7
    ],
    "Vindex": "adgroup_idx"
  }
}
